# Liste mit offenen Aufgaben
- [ ] plugin.json pro Pluginverzeichnis anlegen
- [ ] lib/update_manager.js erstellen
- [ ] Unit- und Integrationstests einrichten
- [ ] GitHub Actions für Linting und Testing hinzufügen
- [ ] ZIP-Backup-Modul fertigstellen
- [ ] Undo/Redo-Funktion implementieren
- [ ] Filter- und Favoriten-Funktion ergänzen
- [ ] Scrollsync und Projektordner verwalten
- [ ] Wöchentlichen Selfcheck automatisieren (Cronjob)
- [ ] Release vorbereiten: Selfcheck, README prüfen, Release-Tag erstellen
- [ ] DEB- und AppImage-Paket bauen
- [ ] CI/CD-Pipeline einrichten (Lint → Test → Build → Release)
- [ ] Accessibility-Audit der Panels durchführen und Code aufräumen
- [ ] Automatische Versionierung und Changelog-Workflow einrichten
- [ ] JavaScript-Tools auf TypeScript umstellen (Schema-Validierung)
# Liste mit sich aus Entwicklung ergebenden weiteren noch zu erfüllenden Aufgaben
- [ ] Zufallsmodi mit Profilgewichtung implementieren
- [ ] Logging ins Dashboard einbauen
- [ ] CSS responsiv machen, Test mit Axe/WAVE
- [ ] Platzhalter-Datei automatisch mit todo.txt aktualisieren
- [ ] Dokumentation aktualisieren (README, AGENTS)
- [ ] Fehlende Dateien und Ordner mit Platzhaltern anlegen
- [ ] Erinnerung an ungespeicherte Änderungen beim Beenden integrieren
- [ ] Persönlichen Startbildschirm mit Favoriten-Modulen erstellen
- [ ] Automatische Validierung jedes Moduls vor Aktivierung
- [ ] Farbkontrast-Optimierung nach WCAG umsetzen
- [ ] Fokusmodus: 1 Modul fullscreen, andere minimiert
- [ ] Tooltip-Akademie beim ersten Start anzeigen
- [ ] Modul-Querverlinkung zwischen Panels ermöglichen
- [ ] Direkt-Export aus Modulen (TXT, PDF, JSON)
- [ ] ZIP-Import und automatische Modul-Verteilung
- [ ] Schreibschutz-Option pro Panel
- [ ] Fehler-Erkennung mit Auto-Korrektur-Vorschlägen
- [ ] Dateileichen-Erkennung und Entrümplungsmodus
- [ ] Globaler Suchfilter für alle Module und Inhalte
- [ ] Todo-Listen-Modul integrieren
- [ ] Songtext-Editor mit Titelfeld und Notiz speichern
- [ ] Dialog-Schreiber mit Charakterverwaltung bauen
- [ ] Info-Manager für eigene Befehle anlegen
- [ ] Zitaten-Modul mit Notizfeld umsetzen
- [ ] Interaktiven Modulbaukasten erstellen
- Anleitung zum Selbstcheck im README ergänzt
- modules.json erstellt (enthält angemeldete Panels)
- README um Hinweis zu modules.json ergänzt
- Nach jeder Änderung: `bash tools/selfcheck.sh` ausführen (Selbsttest)
- MIT-Lizenz hinzugefuegt (LICENSE-Datei, Verweis in README)
- AGENTS.md Codeblock geschlossen (triple backticks).
- [ ] Templates-Modul (Panel02) erstellen
- [ ] Undo/Redo-System einbauen
- [ ] ZIP-Backup-Funktion ergänzen

- [ ] Letzter Selfcheck vor dem Release
- [ ] README um Releasenotizen ergaenzen
- [ ] finale Platzhalter-Datei erstellen
- [ ] Weitere Module über das Script erstellen und testen
- [ ] Wöchentlichen Selfcheck automatisieren (Cronjob: `crontab -e` -> `0 7 * * 1 bash /pfad/zu/tools/selfcheck.sh`)
- [ ] DEB- und AppImage-Paket bauen
- [ ] Datei-Übersicht per Skript pflegen
- [ ] ZIP-Backup-Modul entwickeln (Panel07)
- [ ] Undo-/Redo-Funktion einbauen (Panel08)
- [ ] Undo/Redo-Funktion einbauen
- [ ] ZIP-Backup vorbereiten
- [ ] Filter/Favoriten integrieren
- [ ] Scrollsync und Projektordner verwalten
- [ ] Modul-Übersicht per Skript in module_übersicht.txt aktualisieren
- [ ] Release vorbereiten: Selfcheck, README final prüfen, Release-Tag erstellen
- [ ] Autoupdate-Skripte entfernt, Infos manuell pflegen
- [ ] plugin.json pro Pluginverzeichnis anlegen (Manifest mit Name und Version)
- [ ] zentrale Update-Bibliothek in lib/ erstellen (update_manager.js)
- [ ] Unit- und Integrationstests einrichten
- [ ] GitHub Actions für Linting und Testing hinzufügen
- [ ] Schritt-für-Schritt-Assistenten für Modul-Erstellung planen
- [ ] Barrierefreiheit automatisch prüfen (axe-core)

- [ ] Unnötige Platzhalter-Dateien entfernen
- [ ] GitHub-Workflow test.yml für automatische Prüfungen


- [ ] Startskript prüft Updates vor dem Start
- [ ] Startskript prüft Updates vor dem Start
- [ ] README mit Inhaltsverzeichnis und Hilfe-Link ergänzen
- [ ] selfcheck.sh synchronisiert todo-Dateien nach Lauf

- [ ] Fehler-Tipps direkt im Tool anzeigen (Tooltip = kurzer Hinweis).
- [ ] Fehler-Logdatei automatisch pflegen (logs/error.log).
- [ ] Release-Endspurt: Offene Punkte laut README (Undo/Redo, ZIP-Backup, Filter/Favoriten, Scrollsync/Projektordner)
- [ ] Vor dem Release bash tools/selfcheck.sh ausfuehren und Releasenotizen im README ergaenzen
- [ ] Einfache Archiv-Buttons einrichten
- [ ] DOMPurify einsetzen, um HTML zu s\u00e4ubern (Sanitizing = gef\u00e4hrliche Inhalte entfernen). Befehl: `npm install dompurify`
- [ ] Code-Formatierung mit Prettier (Formatierer = ordnet Einr\u00fcckungen und Leerzeichen). Befehl: `npx prettier --write .`
- [ ] JavaScript-Code pr\u00fcfen mit ESLint (Linting = Fehler- und Stilpr\u00fcfung). Befehl: `npx eslint .`
- [ ] Dynamische Elemente mit eindeutigen IDs versehen (ID = unverwechselbare Kennung). Beispiel: `elem.id='panel-'+index`
- [ ] Service Worker einrichten für Offline-Betrieb (PWA = Webapp zum Installieren). Befehl: `npx workbox-cli wizard`

- [ ] Redundante Arrays wie "genres" und "dashboardData" in einem einzigen Objekt `state` sammeln. Befehl: `grep -n "genres" -r`
- [ ] Gewichtete Zufallsauswahl vor dem Anzeigen laden. Befehl: `window.addEventListener("DOMContentLoaded", initWeights);`
  ```js
  fetch("modules.json").then(r=>{ if(!r.ok) throw new Error(r.status); return r.json(); });
  ```
- [ ] Selfcheck-Fehler direkt mit Lösung verlinken. Befehl: `node tools/map_errors.js`
  ```js
  const frag=document.createDocumentFragment();
  items.forEach(i=>frag.appendChild(i));
  list.replaceChildren(frag);
  ```
- [ ] Skripte aus index-MODULTOOL.html in `app.js` auslagern und mit `<script type="module" defer src="app.js"></script>` einbinden
- [ ] Zentrale Einstellungen in `config.js` speichern (z.B. Limits, Theme-Liste). Befehl: `nano config.js`
- [ ] Eine `manifest.json` für die PWA anlegen. Befehl: `npx workbox-cli generateSW`
- [ ] Einheitlichen Funktionsstil nutzen (Pfeilfunktion = ()=>{} oder function). Automatisch anpassen: `npx eslint . --fix`
- [ ] Farbwerte vereinheitlichen und Design-Token nutzen. Datei öffnen mit `nano modules/common.css`
- [ ] Panel-Kopfzeilen einheitlich benennen. Fundstellen anzeigen mit `grep -n head modules/*.html`
- [ ] Verschachtelte Buttons vermeiden. Kontrollieren: `grep -n "<button" -r modules`
- [ ] Kontrast im hellen Theme optimieren. Farbe in `modules/common.css` anpassen (`nano modules/common.css`)
- [ ] Fokus-Ring-Farbe an Rahmen angleichen. Variable `--focus-ring` in `modules/common.css` definieren

- [ ] Node-Version anzeigen. Befehl: `node --version` (Node.js = JavaScript-Laufzeitumgebung).
- [ ] Pakete automatisch auf Sicherheitslücken prüfen. Befehl: `npm audit fix` (Security-Check = bekannte Schwachstellen schließen).
- [ ] CSS mit Stylelint prüfen. Befehl: `npx stylelint "**/*.css"` (Stylelint = CSS-Stilprüfer).
- [ ] Bilder verkleinern mit Imagemin. Befehl: `npx imagemin src/img/* --out-dir=dist/img` (Bildkomprimierung = kleinere Dateigröße).
- [ ] Git-Tag für Release setzen. Befehl: `git tag -a v1.0 -m 'Version 1.0' && git push --tags` (Tag = Versionsmarkierung im Repository).
- [ ] Pakete auf Aktualität prüfen. Befehl: `npm outdated` (outdated = veraltete Pakete anzeigen).
- [ ] Alle Pakete aktualisieren. Befehl: `npm update` (update = auf den neuesten Stand bringen).
- [ ] CSS automatisch mit Autoprefixer erweitern. Befehl: `npx postcss modules/*.css --use autoprefixer -d modules` (Autoprefixer = Browser-Präfixe ergänzen).
- [ ] Web-App mit Lighthouse testen. Befehl: `npx lighthouse http://localhost:8000/index-MODULTOOL.html` (Lighthouse = Analyse für Performance und Barrierefreiheit).
- [ ] Lokalen Server ohne Python starten. Befehl: `npx http-server` (http-server = einfacher Entwicklungsserver).
