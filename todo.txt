# Liste mit offenen Aufgaben
- [x] plugin.json pro Pluginverzeichnis anlegen
- [x] lib/update_manager.js erstellen
- [x] Unit- und Integrationstests einrichten
- [x] GitHub Actions für Linting und Testing hinzufügen
- [x] ZIP-Backup-Modul fertigstellen
- [x] Undo/Redo-Funktion implementieren
- [x] Filter- und Favoriten-Funktion ergänzen
- [x] Scrollsync zuschaltbar
- [x] Projektordner verwalten (tools/manage_projects.sh)
- [x] Wöchentlichen Selfcheck automatisieren (Cronjob)
- [ ] Release vorbereiten: Selfcheck, README prüfen, Release-Tag erstellen
- [x] DEB- und AppImage-Paket bauen
- [ ] CI/CD-Pipeline einrichten (Lint → Test → Build → Release)
- [ ] Accessibility-Audit der Panels durchführen und Code aufräumen
- [ ] Automatische Versionierung und Changelog-Workflow einrichten
- [ ] JavaScript-Tools auf TypeScript umstellen (Schema-Validierung)
- [ ] Eingaben prüfen (Input-Sanitierung) für IDs und Pfade
- [ ] Alle Konfigs mit Schema validieren (JSON Schema/Zod)
- [ ] Eigene Fehlerklassen definieren
- [ ] Zentralen Error-Handler einrichten
- [ ] Fehlermeldungen nutzerfreundlich formulieren
- [ ] Automatischen Rollback bei Abbruch einbauen
- [ ] Wiederholen-Funktion nach Fehler anbieten
- [ ] Logging mit Zeitstempel im UI anzeigen
- [ ] Log-Download-Button einfügen
- [ ] Standard-Vorlagen und Beispiel-Module bereitstellen
# Liste mit sich aus Entwicklung ergebenden weiteren noch zu erfüllenden Aufgaben
- [x] Zufallsmodi mit Profilgewichtung implementieren
- [x] Genre-Profile per Schnellwahl auswählbar
- [x] Logging ins Dashboard einbauen
- [x] CSS responsiv machen, Test mit Axe/WAVE
- [x] Platzhalter-Datei automatisch mit todo.txt aktualisieren
- [x] Dokumentation aktualisieren (README, AGENTS)
- [x] Fehlende Dateien und Ordner mit Platzhaltern anlegen
- [x] Erinnerung an ungespeicherte Änderungen beim Beenden integrieren
- [x] Persönlichen Startbildschirm mit Favoriten-Modulen erstellen
- [x] Bugfix: Startbildschirm schließt per X-Button
- [ ] Automatische Validierung jedes Moduls vor Aktivierung
- [x] Farbkontrast-Optimierung nach WCAG umsetzen
- [ ] Fokusmodus: 1 Modul fullscreen, andere minimiert
 - [x] Tooltip-Akademie beim ersten Start anzeigen
- [ ] Modul-Querverlinkung zwischen Panels ermöglichen
- [x] Direkt-Export aus Modulen (TXT, JSON) umgesetzt
- [ ] ZIP-Import und automatische Modul-Verteilung
- [ ] Schreibschutz-Option pro Panel
- [ ] Fehler-Erkennung mit Auto-Korrektur-Vorschlägen
- [ ] Dateileichen-Erkennung und Entrümplungsmodus
- [ ] Globaler Suchfilter für alle Module und Inhalte
- [x] Todo-Listen-Modul integrieren
- [ ] Songtext-Editor mit Titelfeld und Notiz speichern
- [ ] Dialog-Schreiber mit Charakterverwaltung bauen
- [ ] Info-Manager für eigene Befehle anlegen
- [x] Zitaten-Modul mit Notizfeld umsetzen
- [x] Interaktiven Modulbaukasten erstellen
- [x] Anleitung zum Selbstcheck im README ergänzt
- [x] modules.json erstellt (enthält angemeldete Panels)
- [x] README um Hinweis zu modules.json ergänzt
- Nach jeder Änderung: `bash tools/selfcheck.sh` ausführen (Selbsttest)
- MIT-Lizenz hinzugefuegt (LICENSE-Datei, Verweis in README)
- AGENTS.md Codeblock geschlossen (triple backticks).
- [ ] Templates-Modul (Panel02) erstellen
- [x] Modul-Template vereinheitlichen (gemeinsames API und Fehleranzeige)
- [ ] Undo/Redo-System einbauen
- [x] ZIP-Backup-Funktion ergänzen

- [ ] Letzter Selfcheck vor dem Release
- [ ] README um Releasenotizen ergaenzen
- [x] finale Platzhalter-Datei erstellen
- [x] Platzhalter-Beispiel erweitert
- [x] deleteJSON-Funktion ergänzt
- [ ] Weitere Module über das Script erstellen und testen
- [x] Wöchentlichen Selfcheck automatisieren (Cronjob: `crontab -e` -> `0 7 * * 1 bash /pfad/zu/tools/weekly_selfcheck.sh`)
- [x] DEB- und AppImage-Paket bauen
- [ ] Datei-Übersicht per Skript pflegen
- [x] ZIP-Backup-Modul entwickeln (Panel07)
- [ ] Undo-/Redo-Funktion einbauen (Panel08)
- [ ] Undo/Redo-Funktion einbauen
- [x] ZIP-Backup vorbereiten
 - [ ] Filter/Favoriten integrieren
 - [x] Scrollsync zuschaltbar
 - [x] Projektordner verwalten (tools/manage_projects.sh)
- [ ] Modul-Übersicht per Skript in module_übersicht.txt aktualisieren
- [ ] Release vorbereiten: Selfcheck, README final prüfen, Release-Tag erstellen
- [ ] Autoupdate-Skripte entfernt, Infos manuell pflegen
- [x] plugin.json pro Pluginverzeichnis anlegen (Manifest mit Name und Version)
- [x] zentrale Update-Bibliothek in lib/ erstellen (update_manager.js)
- [x] Unit- und Integrationstests einrichten
- [x] GitHub Actions für Linting und Testing hinzufügen
- [ ] Schritt-für-Schritt-Assistenten für Modul-Erstellung planen
- [x] Barrierefreiheit automatisch prüfen (axe-core)
- [x] Barrierefreiheits-Report-Tool (a11y_report.sh) erstellen
- [ ] Barrierefreiheits-Report regelmäßig per Cronjob ausführen

- [ ] Unnötige Platzhalter-Dateien entfernen
- [x] GitHub-Workflow test.yml für automatische Prüfungen


- [ ] Startskript prüft Updates vor dem Start
- [ ] Startskript prüft Updates vor dem Start
- [x] Hilfeoption (-h) und Browser-Auswahl (--no-browser) im Startskript
- [x] Port-Option (-p) im Startskript
- [ ] README mit Inhaltsverzeichnis und Hilfe-Link ergänzen
- [x] selfcheck.sh synchronisiert todo-Dateien nach Lauf

- [ ] Fehler-Tipps direkt im Tool anzeigen (Tooltip = kurzer Hinweis).
- [ ] Fehler-Logdatei automatisch pflegen (logs/error.log).
- [ ] Fehlerhinweise in error_informationen.txt ergänzen
 - [ ] Release-Endspurt: Offene Punkte laut README (Undo/Redo, ZIP-Backup, Filter/Favoriten)
- [ ] Vor dem Release bash tools/selfcheck.sh ausfuehren und Releasenotizen im README ergaenzen
- [ ] Einfache Archiv-Buttons einrichten
- [x] DOMPurify einsetzen, um HTML zu s\u00e4ubern (Sanitizing = gef\u00e4hrliche Inhalte entfernen). Befehl: `npm install dompurify`
- [ ] Code-Formatierung mit Prettier (Formatierer = ordnet Einr\u00fcckungen und Leerzeichen). Befehl: `npx prettier --write .`
- [ ] JavaScript-Code pr\u00fcfen mit ESLint (Linting = Fehler- und Stilpr\u00fcfung). Befehl: `npx eslint .`
- [ ] Dynamische Elemente mit eindeutigen IDs versehen (ID = unverwechselbare Kennung). Beispiel: `elem.id='panel-'+index`
- [ ] Service Worker einrichten für Offline-Betrieb (PWA = Webapp zum Installieren). Befehl: `npx workbox-cli wizard`

- [x] Redundante Arrays wie "genres" und "dashboardData" in einem einzigen Objekt `state` sammeln. Befehl: `grep -n "genres" -r`
- [x] Gewichtete Zufallsauswahl vor dem Anzeigen laden. Befehl: `window.addEventListener("DOMContentLoaded", initWeights);`
  ```js
  fetch("modules.json").then(r=>{ if(!r.ok) throw new Error(r.status); return r.json(); });
  ```
- [ ] Selfcheck-Fehler direkt mit Lösung verlinken. Befehl: `node tools/map_errors.js`
- [x] panel01 bereinigt (doppelte Elemente entfernt)
- [x] Startskript um Selbstheilung & Exitstatus-Prüfung erweitert
- [x] Doppelte Variablen wie "let genres" entfernen
- [ ] Einfache Archiv-Buttons einrichten
- [x] fehlenden Button "importInsertBtn" ergänzen
- [x] Theme umschalten ohne "null"-Attribut
- [x] Fokus nur auf sichtbare Panels zulassen

- [ ] Doppelte Variablen wie "let genres" entfernen
- [ ] Einfache Archiv-Buttons einrichten
- [x] fehlenden Button "importInsertBtn" ergänzen
- [x] Theme umschalten ohne "null"-Attribut
- [x] Fokus nur auf sichtbare Panels zulassen
- [ ] Logging vereinheitlichen
- [ ] DOMPurify einsetzen, um HTML zu s\u00e4ubern (Sanitizing = gef\u00e4hrliche Inhalte entfernen). Befehl: `npm install dompurify`
- [ ] Code-Formatierung mit Prettier (Formatierer = ordnet Einr\u00fcckungen und Leerzeichen). Befehl: `npx prettier --write .`
- [ ] JavaScript-Code pr\u00fcfen mit ESLint (Linting = Fehler- und Stilpr\u00fcfung). Befehl: `npx eslint .`
- [x] Import-Dateien checken: nur JSON und unter 1 MB (Security = Schutz vor großen oder fremden Dateien). Beispiel im Code: `if(file.size>1000000||!file.name.endsWith('.json')) return alert('Datei zu groß oder kein JSON');`
- [ ] Import-Dateien checken: nur JSON und unter 1 MB (Security = Schutz vor großen oder fremden Dateien). Beispiel im Code: `if(file.size>1000000||!file.name.endsWith('.json')) return alert('Datei zu groß oder kein JSON');`
- [ ] Versionsnummer in localStorage speichern (Versionierung = Daten einfach aktualisieren). Befehl: `localStorage.setItem('DATA_VERSION','1')`
- [ ] Suche entprellen (Debounce = kurze Wartezeit vor dem Suchlauf). Befehl: `npm install lodash.debounce`
- [ ] Dynamische Elemente mit eindeutigen IDs versehen (ID = unverwechselbare Kennung). Beispiel: `elem.id='panel-'+index`
- [ ] Service Worker einrichten für Offline-Betrieb (PWA = Webapp zum Installieren). Befehl: `npx workbox-cli wizard`

- [ ] Redundante Arrays wie "genres" und "dashboardData" in einem einzigen Objekt `state` sammeln. Befehl: `grep -n "genres" -r`
- [x] Genre-Eingaben strikt auf 24 Zeichen begrenzen. Beispiel: `if(input.value.length > 24) return alert("Max 24 Zeichen");`
- [ ] Genre-Eingaben strikt auf 24 Zeichen begrenzen. Beispiel: `if(input.value.length > 24) return alert("Max 24 Zeichen");`
- [ ] Gewichtete Zufallsauswahl vor dem Anzeigen laden. Befehl: `window.addEventListener("DOMContentLoaded", initWeights);`
- [x] fetch("modules.json") mit Fehlermeldung absichern. Beispiel:
  ```js
  async function loadRegisteredPanels(){
    const res = await fetch('modules.json');
    if(!res.ok){
      if(res.status === 404) throw new Error('Modulliste nicht gefunden (404)');
      throw new Error('HTTP '+res.status);
    }
    const cfg = await res.json();
    cfg.modules.forEach(m => loadPanel(m.id));
  }
  ```
- [ ] Logeinträge im localStorage speichern (Ringpuffer = nur die letzten 50). Befehl: `localStorage.setItem("logs", JSON.stringify(logs.slice(-50)))`
- [ ] Selfcheck-Fehler direkt mit Lösung verlinken. Befehl: `node tools/map_errors.js`
- [ ] Listen per DocumentFragment erneuern (schnelleres Rendering). Befehl:
  ```js
  const frag=document.createDocumentFragment();
  items.forEach(i=>frag.appendChild(i));
  list.replaceChildren(frag);
  ```
- [ ] Skripte aus index-MODULTOOL.html in `app.js` auslagern und mit `<script type="module" defer src="app.js"></script>` einbinden
- [ ] Zentrale Einstellungen in `config.js` speichern (z.B. Limits, Theme-Liste). Befehl: `nano config.js`
- [ ] Eine `manifest.json` für die PWA anlegen. Befehl: `npx workbox-cli generateSW`
- [ ] Einheitlichen Funktionsstil nutzen (Pfeilfunktion = ()=>{} oder function). Automatisch anpassen: `npx eslint . --fix`
- [x] Farbwerte vereinheitlichen und Design-Token nutzen. Datei öffnen mit `nano modules/common.css`
- [ ] Panel-Kopfzeilen einheitlich benennen. Fundstellen anzeigen mit `grep -n head modules/*.html`
- [ ] Verschachtelte Buttons vermeiden. Kontrollieren: `grep -n "<button" -r modules`
- [ ] Kontrast im hellen Theme optimieren. Farbe in `modules/common.css` anpassen (`nano modules/common.css`)
- [x] Fokus-Ring-Farbe an Rahmen angleichen. Variable `--focus-ring` in `modules/common.css` definieren
- [ ] Logging zusammenführen (debugLogArr und dashLogArr). Fundstellen suchen: `grep -n dashLogArr -r`
- [ ] role="region" immer mit aria-labelledby verknüpfen. Beispiel: `<div role="region" aria-labelledby="panel1-head">`
- [ ] Verschachtelte Buttons vermeiden. Kontrollieren: `grep -n "<button" -r modules`
- [ ] Kontrast im hellen Theme optimieren. Farbe in `modules/common.css` anpassen (`nano modules/common.css`)
- [ ] Fokus-Ring-Farbe an Rahmen angleichen. Variable `--focus-ring` in `modules/common.css` definieren

- [x] Node-Version anzeigen. Befehl: `node --version` (Node.js = JavaScript-Laufzeitumgebung).
- [x] Pakete automatisch auf Sicherheitslücken prüfen. Befehl: `npm audit fix` (Security-Check = bekannte Schwachstellen schließen).
- [ ] CSS mit Stylelint prüfen. Befehl: `npx stylelint "**/*.css"` (Stylelint = CSS-Stilprüfer).
- [ ] Bilder verkleinern mit Imagemin. Befehl: `npx imagemin src/img/* --out-dir=dist/img` (Bildkomprimierung = kleinere Dateigröße).
- [ ] Git-Tag für Release setzen. Befehl: `git tag -a v1.0 -m 'Version 1.0' && git push --tags` (Tag = Versionsmarkierung im Repository).
- [ ] Pakete auf Aktualität prüfen. Befehl: `npm outdated` (outdated = veraltete Pakete anzeigen).
- [ ] Alle Pakete aktualisieren. Befehl: `npm update` (update = auf den neuesten Stand bringen).
- [ ] CSS automatisch mit Autoprefixer erweitern. Befehl: `npx postcss modules/*.css --use autoprefixer -d modules` (Autoprefixer = Browser-Präfixe ergänzen).
- [ ] Web-App mit Lighthouse testen. Befehl: `npx lighthouse http://localhost:8000/index-MODULTOOL.html` (Lighthouse = Analyse für Performance und Barrierefreiheit).
- [ ] Lokalen Server ohne Python starten. Befehl: `npx http-server` (http-server = einfacher Entwicklungsserver).
- [x] Grid automatisch anpassen (auto-fit = Module passen sich der Fensterbreite an). CSS-Beispiel: `grid-template-columns: repeat(auto-fit, minmax(280px,1fr));`
- [x] Weitere Laienvorschläge in LAIENHILFE ergänzt
- [ ] Textdateien bereinigen (Whitespace & Newline)
- [ ] Code-Stil prüfen (Linting = automatischer Stilcheck). Befehl: `npm run lint`
- [ ] Eingaben prüfen (Validation = Datenkontrolle). Befehl: `node validation.js`
- [x] Fokus-Dropdown dynamisch generieren
- [x] Fokusmodus an Panel-Anzahl anpassen
- [x] Fokus-Menü in Header integrieren
- [x] Export-Funktion für Zitate und Todo-Liste

- [ ] Kontrastwerte nach WCAG pruefen (Kontrast = Unterschied zwischen Vorder- und Hintergrund). Befehl: `npx lighthouse http://localhost:8000/index-MODULTOOL.html`
- [x] Einheitliche Schriftgroesse per CSS-Variable `--base-font` in index-MODULTOOL.html setzen (base-font = Grundschrift).
- [x] Buttons und Links mit `aria-label` ergaenzen (ARIA = zusaetzliche Bildschirmleser-Beschreibung).
- [x] Grid-Layout mit `grid-template-columns: repeat(auto-fit, minmax(320px,1fr))` in modules/common.css erweitern (Grid = Raster zur Anordnung).
- [x] Theme-Farben zentral in modules/common.css definieren (Theme = Farbpalette).
- [x] Schaltflaechen-Stil zentral in modules/common.css definieren
- [x] Story-Sampler-Modul ergänzt
- [x] Startskript über npm start verfügbar
- [x] Abschnitt "Updates und Versionen" in LAIENHILFE ergänzt
- [x] README mit Hinweisen auf npm start und npm run sync
- [x] Modulversionen mit npm run sync aktualisiert
- [x] Weiterfuehrende Laienvorschlaege ergaenzt
- [x] Weitere Laienvorschläge (Fortsetzung) ergänzt
- [x] Weitere Laienvorschläge (Zusatz 3) ergänzt
- [x] Weitere Laienvorschläge (Zusatz 4) ergänzt
- [x] Hinweis auf todo.txt-Synchronisation aufgenommen
- [ ] Offene Punkte aus AGENTS-RELEASE-CHECK.md bearbeiten
- [x] Release-Checkliste in LAIENHILFE ergänzt
- [x] Willkommensfenster per X oder Esc schließen
- [x] Startskript installiert fehlende Node-Pakete automatisch
- [x] Globale Standards dokumentiert
- [x] 3-Spalten-Grid mit `clamp()` umsetzen
- [x] Fokusmodus per Body-Klasse aktivieren
- [ ] Feste Höhen in Panels entfernen
- [ ] Fluides Schriftbild mit `clamp()` für Textgrößen
- [x] Sticky-Header und Scroll nur bei Bedarf
- [x] Einheitliche Button-Klasse in common.css
- [x] Statusmeldungen vom Layout trennen (Toast-Layer)
- [x] Scrollposition beim Panelwechsel merken
- [ ] Module vor dem Import mit DOMPurify reinigen
- [x] Platzhaltertexte bei leeren Listen anzeigen
- [x] `max-height:470px` im Layout entfernen
- [x] Sidebars mit `clamp()` breiter machen
- [x] Fokusmodus-Panel immer 100% Höhe
- [x] Reservefläche für Statusmeldungen einplanen
- [x] Grid-Abstände fluid anpassen
- [x] Globale Overflow-Kontrolle einrichten
- [ ] Panelwechsel ohne kompletten Re-Render
- [ ] Farbpalette reduzieren und klare Zustände
- [ ] Fokusmarkierung klar darstellen
- [ ] Breakpoints feinjustieren und Wide Mode testen
- [x] Scroll-Cache nutzen und Re-Render minimieren
- [ ] CSS in Module aufteilen
- [x] User-Feedback-Panel integrieren
- [x] Themes Trash/Contrast/Minimal ergänzen
- [ ] Layout auf QSplitter und QGridLayout umstellen
- [ ] Zentrale Sidebar mit Panel-Management
- [ ] Panels als Klassen kapseln
- [ ] Vollständige Tab- und Screenreader-Navigation
- [ ] Sprechende Labels und Tooltips ergänzen
- [ ] Globale Fehlerbehandlung mit Nutzerfeedback
- [ ] Undo/Redo, Papierkorb und automatische Backups
- [ ] Einheitliches Trash-Design
- [ ] Geführtes Onboarding und Hilfe-Panel
- [ ] Laienfreundliche Hinweise beim Speichern und Löschen
- [ ] Hauptlayout auf QSplitter/GridLayout umstellen
- [ ] Sidebar-Logik vereinheitlichen, aktive Panels hervorheben
- [ ] Panels dynamisch anpassbar und einrollbar machen
- [ ] Alle Bedienelemente barrierefrei gestalten (Tab-Reihenfolge, Namen, Tooltips)
- [ ] Kontraste und Schriftgrößen überprüfen (Trash-Look vermeiden)
- [ ] Hilfetexte überall sichtbar platzieren
- [ ] Feedback nach Aktionen anzeigen (Speichern, Löschen, Fehler)
- [ ] Undo/Redo in allen Editoren integrieren
- [ ] Exceptions abfangen und Hinweise anzeigen
- [ ] Scroll- und Zoom-Steuerung an Mausfokus koppeln
- [ ] Leere Flächen sinnvoll nutzen (Vorschau oder Hinweis)
- [ ] Layout-Analyse und Sidebars optimieren

# Neue Vorschläge für ablenkungsfreie Oberfläche
- [ ] Ablenkungsfreier Modus per F11 (Menüs ausblenden)
- [ ] Kontext-Hilfe per F1 für jedes Eingabefeld
- [ ] Farbige Statuszeile für Speichern- und Fehlermeldungen
- [ ] Offline-Hilfeseite als PDF zum Herunterladen
- [ ] Tastenkombinationen im UI einblenden (Shortcut-Hilfe)
- [ ] Zurück-Button nach Modul-Maximierung einbauen

# Weitere Laienvorschläge (Zusatz 5)
- [ ] Live-Schnellsuche in der Sidebar
- [ ] Balkendiagramm über meistgenutzte Module
- [ ] Kurze Hilfetexte direkt neben Modulen
- [ ] Papierkorb- und Backup-Shortcuts anzeigen
- [ ] Ausklappbare Loganzeige im Fußbereich
- [ ] Theme per Klick wechseln
- [ ] Tooltip-Texte an allen Buttons
- [ ] Große Aktionsflächen für Touch

# Weitere Laienvorschläge (Zusatz 6)
- [ ] Offline-Hilfeseite als PDF erzeugen
- [ ] Shortcut-Übersicht per F10 anzeigen
- [ ] Zurück-Button nach Modul-Maximierung
- [ ] Fehlerprotokoll live im Footer darstellen
# Weitere Laienvorschläge (Zusatz 7)
- [ ] Grundordner gui/core/assets/backups erstellen
- [ ] Modultemplate als Klasse speichern
- [ ] Einfaches Dashboard-Skript anlegen
- [ ] README mit neuer Struktur aktualisieren

# Weitere Laienvorschläge (Zusatz 8)
- [ ] Module automatisch aus modules.json laden
- [ ] module_loader.js in eigenen Projekten nutzen
- [ ] show_usage.js im README dokumentieren

# Weitere Laienvorschläge (Zusatz 9)
- [ ] Fehlerprotokoll anzeigen
- [ ] Module gezielt deaktivieren
- [ ] Backup-Skript ausführen


# Weitere Laienvorschl\u00e4ge (Zusatz 10)
- [ ] Sicherheitspr\u00fcfung ausf\u00fchren
- [ ] TypeScript kompilieren
- [ ] Dokumentation lesen

